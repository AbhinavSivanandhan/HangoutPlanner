<% layout('layouts/boilerplate')%>


<div class="row">
    <div class="col-6">
        <div class="card mb-3">
            <img src="<%= occasion.image%>" class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title"><%= occasion.title%></h5>
                <p class="card-text"><%= occasion.location%></p>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item text-muted"><%= occasion.description%>. Priced at $<%= occasion.price%>/person</li>
                <li class="list-group-item"><%= occasion.participants%></li>
                <li class="list-group-item">Submitted by <%= occasion.author.username %></li>
                <li class="list-group-item">From <%= occasion.startDate%> to <%= occasion.endDate%></li>
            </ul>
            <% if(currentUser && occasion.author.equals(currentUser._id)) {%>
            <div class="card-body">
                <a class="card-link btn btn-info" href="/occasions/<%=occasion._id%>/edit">Edit</a>
                <form class="d-inline" action="/occasions/<%=occasion._id%>?_method=DELETE" method="POST">
                    <button class="btn btn-danger">Delete</button>
                </form>
            </div>
            <% } %>
            <div class="card-footer text-muted">
                2 days ago
            </div>
        </div>

    </div>
    <div class="col-6">
      <% if(currentUser){ %>
        <h2>Leave a Review</h2>
        <form action="/occasions/<%=occasion._id%>/reviews" method="POST" class="mb-3 validated-form" novalidate>
            <div class="mb-3">
                <label class="form-label" for="rating">Rating</label>
                <input class="form-range" type="range" min="1" max="5" name="review[rating]" id="rating">
            </div>
            <div class="mb-3">
                <label class="form-label" for="body">Review</label>
                <textarea class="form-control" name="review[body]" id="body" cols="30" rows="3" required></textarea>
                <div class="valid-feedback">
                    Looks good!
                </div>
            </div>
            <button class="btn btn-success">Submit</button>
        </form>
        <% } %>
        <div class="card mb-1">
            <!-- tags come here -->
            <div class="container">
                <!--<form action="/occasions/<%=occasion._id%>/tags" method="POST">  class="mb-3 validated-form" novalidate> -->
                <div class="tag-container">
                   <input class="form-control" type="text" id="tagList" />
                </div>
                <button class="btn btn-success" onclick="sendTaglist()">Tag it!</button>
                <!-- </form> -->
            </div>
        </div>
        <% for(let review of occasion.reviews) { %>
        <div class="card mb-3 ">
            <div class="card-body">
                <h5 class="card-title">Rating: <%= review.rating %></h5>
                <h6 class=""card-substitle mb-2 text-muted">By <%= review.author.username%></h6>
                <p class="card-text">Review: <%= review.body %></p>
                <% if(currentUser && review.author.equals(currentUser._id)) {%>
                <form action="/occasions/<%=occasion._id%>/reviews/<%=review._id%>?_method=DELETE" method="POST">
                  <button class="btn btn-sm btn-danger">Delete</button>
                </form>
              <% } %>
            </div>
        </div>
        <% } %>


    </div>
</div>
<script>
    const tagContainer = document.querySelector('.tag-container');

    const input = document.querySelector('.tag-container input');

    var tags = [];

   function createTag(label){
      const div = document.createElement('div');
      div.setAttribute('class', 'tag');
      const span = document.createElement('span');
      span.innerHTML = label;
      const closeBtn = document.createElement('span');
      closeBtn.setAttribute('class','material-symbols-outlined');
      closeBtn.setAttribute('data-item', label);//set attribute just creates a variable on tag, this is allowed and it is handy
      closeBtn.innerHTML = 'close';
      
      div.appendChild(span);
      div.appendChild(closeBtn);
     return div;      
}

function reset(){
    document.querySelectorAll('.tag').forEach(function(tag){
        tag.parentElement.removeChild(tag);
    })
}
function addTags(){
    reset(); 
    tags.slice().reverse().forEach(function(tag){
        const input = createTag(tag);
        tagContainer.prepend(input);
    })
}

//tagContainer.prepend(createTag('Value1'))
input.addEventListener('keyup', function(e){
   if(e.key === 'Enter'){
      tags.push(input.value);
      addTags();
      input.value='';
   }
})

document.addEventListener('click', function(e){
    if (e.target.innerHTML === 'close'){
        const value = e.target.getAttribute('data-item'); 
        const index = tags.indexOf(value);
        tags = [...tags.slice(0, index), ...tags.slice(index + 1)];
        addTags();
    }
})

const inputField = document.getElementById("tagList");
  inputField.addEventListener("keydown", function (event) {
    if (event.key === "Enter") {
      event.preventDefault();
    }
  });

function sendTaglist(){
    const url = new URL(window.location.href);
    const occasion_id = url.pathname.split('occasions/').pop();
    // console.log(tags);
    const post_url='/occasions/'+occasion_id+'/tags'
    fetch(post_url, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(tags)
})
.then(response => {
  if (response.ok) {
    // console.log(response)
    return response.json();
  }
  throw new Error('Network response was not ok.');
})
.then(json => {
  console.log('Data sent successfully:', json);
})
.catch(error => {
  console.error('Error sending data:', error);
});
}

// function getTaglist(){
    
// }
function getTaglist(){
  const url = new URL(window.location.href);
  const occasion_id = url.pathname.split('occasions/').pop();
  console.log('occ id:'+occasion_id);
    // console.log(tags);
    const get_url='/occasions/'+occasion_id+'/tags'
    console.log('get_url: '+get_url);
    fetch(get_url)
  .then(response => {
    if (response.ok) {
      return response.json();
    }
    throw new Error('Network response was not ok.');
  })
  .then(tagsJSON => {
    // Assign the tags array to a variable
    console.log(tagsJSON[0].tag);
    tags = Array.from(tagsJSON[0].tag);
    console.log('Tags:', tags);
    console.log('Tagstype:', typeof tags);
  })
  .then(tagsJSON => {
    reset(); 
  //var dummy = ['a','b','c']
  tags.slice().reverse().forEach(function(tag){
      const input = createTag(tag);
      tagContainer.prepend(input);
  })
  //tags=tags;
  }) 
  .catch(error => {
    console.error('Error retrieving tags:', error);
  });
  
  
 // console.log('reload the page');

}
document.addEventListener("DOMContentLoaded", function() {
  // Code to be executed when the page is fully loaded
  getTaglist();
  //dummyLoad();
});

</script>


   